{
    "contents" : "tab <- read.csv('../msleep_ggplot2.csv') #creates a data.frame\nhead(tab) #returns the first and last part of a data.frame, vector, list etc\ndim(tab) #retrieve or set the dimension of the object\n?read.csv #read function also has an argument as header such that if set to \"TRUE\" then it assumes that the \n#first line has the names of the variables (headers of column)\n#Question1\ntab$sleep_total[1] #tab$column_name returns a vector\n\n#Manipulating Vectors\nc(tab$sleep_total, 1000) #Adds 1000 to sleep_total\n\n#plot\nplot(tab$brainwt, tab$sleep_total)\nplot(tab$brainwt, tab$sleep_total, log=\"x\")\n\n#Question2\nsummary(tab$sleep_total)[5] #in general see summary(tab)\n\n#Question3\ntab[ tab$sleep_total > 18, ]\n\nwhich(tab$sleep_total > 18) #which gives us the number of the rows which are true for a given property\n\n#Question4\nwhich(tab$sleep_total > 18 & tab$sleep_rem < 3)\n\n#sort(vector) just sorts the vector\n#order gives us the indexes in the original array of the sorted values\n\n#Question5\norder(tab$sleep_total)[1]\n\nrank(c(10,2,2,3)) # gives the appropriate rank or position to numbers\n\n#Question6\nrank(tab$sleep_total)[1]\n\nmatch(c(\"Cow\",\"Owl monkey\",\"Cheetah\"), tab$name) #Match gives us the indexes of the matches of first vector\n#in second vector you could also say it is find\n\n#Question 7\nmatch(c(\"Cotton rat\"), tab$name)\n\n#Factors in R are a way to turn character vectors with repeating values into a class of object that \n#recognizes the repeated values\n#What R is doing internally is keeping track of character values using integers,where the integer refers \n#to the unique values, or \"levels\" of the factor. But R shows you the character vector when you print\n#the factor. \nvec = c(\"red\",\"blue\",\"red\",\"green\",\"green\",\"yellow\",\"orange\")\nfac = factor(vec)\nfac\nlevels(fac)\n\nfac2 = factor(vec, levels=c(\"blue\",\"green\",\"yellow\",\"orange\",\"red\"))\nfac2\nlevels(fac2)\n\n#Question 8\ntable(tab$order)[[\"Rodentia\"]] #table in general counts the number of repetitions\n\ns = split(tab$sleep_total, tab$order) #It builds a list of a vector by grouping it according to a factor\n#We can pull out a single vector by using the name of the Order or number that it occurs in the list\n#Always use double brackets while indexing lists\n\n#Question 9\nmean(s[[\"Rodentia\"]])\n\n#sapply applies a function to all the elements of list/vector and get a vector back\n#lapply applies a function to all the elements of list/vector and get a list back\n\n#tapply applies sapply and split together\n\n#A bit on merging\nrats <- data.frame(id = paste0(\"rat\", 1:10), \n                   sex = factor(rep(c(\"female\", \"male\"), each = 5)),\n                   weight = c(2, 4, 1, 11, 18, 12, 7, 12, 19, 20),\n                   length = c(100, 105, 115, 130, 95, 150, 165, 180, 190, 175))   \n\nratsTable <- data.frame(id = paste0(\"rat\", c(6, 9, 7, 3, 5, 1, 10, 4, 8, 2)), \n                        secretID = 1:10)\ncbind #Takes 2 class objects and bind thems w.r.t columns or rows\ncbind(rats[match(ratsTable$id, rats$id), ], ratsTable)\n\nratsMerged <- merge(rats, ratsTable, by.x = \"id\", by.y = \"id\")\nratsMerged[order(ratsMerged$secretID), ]\n\n#Another way of grouping\n#use package dplyr\nlibrary(dplyr)\nsexes <- group_by(rats, sex)\nsummarise(sexes, ave = mean(weight))\n",
    "created" : 1440059456648.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1098818315",
    "id" : "23871547",
    "lastKnownWriteTime" : 1439100041,
    "path" : "~/R-Training/RStatistics/Module1/Assignment/Ass1/code.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}